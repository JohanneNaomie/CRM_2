spring.datasource.url=jdbc:mysql://localhost:3306/crm
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always

#debug johanne
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security.oauth2=TRACE
logging.level.org.springframework.web.client.RestTemplate=TRACE
management.endpoints.web.exposure.include=mappings


spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com


spring.security.oauth2.client.registration.google.client-id=1096290372863-k86g448noocpjkt71b59jr30i8pes0g5.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,email,profile
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google

spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# # Customize the login page URL to include access_type=offline
spring.security.oauth2.client.registration.google.authorization-uri-template=https://accounts.google.com/o/oauth2/auth?access_type=offline&response_type=code&client_id={clientId}&scope={scopes}&state={state}&redirect_uri={redirectUri}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth?access_type=offline&prompt=consent


weather.api.url=http://api.weatherapi.com/v1/current.json
weather.api.key=f1b7d22c54c041ffb6392813252103

app.base-url=http://localhost:8080/

company.name=Easy to build
